pipeline:
  name: "CI - matrices "
  identifier: CI_matrices
  projectIdentifier: technical_exercise
  orgIdentifier: default
  tags:
    CI: ""
    six: ""
    <+steps.Run_1.output.outputVariables.types>: ""
  stages:
    - stage:
        name: DetermineMatrix
        identifier: DetermineMatrix
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.colimak8s
              namespace: loren-dev
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    connectorRef: account.harnessImage
                    image: alpine
                    shell: Sh
                    command: |
                      types='"A","B","C"'
                      echo <+stage.spec.infrastructure.spec.os> <+step.spec.image>
                    outputVariables:
                      - name: types
                  failureStrategies: []
              - step:
                  type: Run
                  name: output
                  identifier: output
                  spec:
                    connectorRef: account.harnessImage
                    image: alpine
                    shell: Sh
                    command: |-
                      set +x
                      echo <+steps.Run_1.output.outputVariables.types>
                      echo "step" <+step.setupId> <+step.runtimeId>
                      echo <+eventPayload.commits.split(',')>
                      echo <+eventPayload.commits.split(':')[]>
                      echo <+eventPayload.commits[]>
    - stage:
        name: ExecuteMatrix
        identifier: ExecuteMatrix
        type: CI
        spec:
          cloneCodebase: false
          infrastructure:
            useFromStage: DetermineMatrix
          execution:
            steps:
              - step:
                  type: Run
                  name: Run_1
                  identifier: Run_1
                  spec:
                    connectorRef: account.harnessImage
                    image: lorenharness/alpine-jq-yq-curl-bash
                    shell: Bash
                    command: |-
                      echo <+matrix.type2> "matrix3"

                        curl -s \
                        -X POST \
                        -H "Authorization: Bearer <+secrets.getValue('account.ghpatsecretacc')>" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/lorenyeung/harness-yaml-templates/statuses/<+codebase.commitSha> \
                        -d '{"state":"pending","target_url":"<+pipeline.execution.url>","description":"Is running <+step.identifier>","context":"harness-ci/tests"}'

                          curl -s \
                        -X POST \
                        -H "Authorization: Bearer <+secrets.getValue('account.ghpatsecretacc')>" \
                        -H "Accept: application/vnd.github.v3+json" \
                        https://api.github.com/repos/lorenyeung/harness-yaml-templates/statuses/<+codebase.commitSha> \
                        -d '{"state":"success","target_url":"<+pipeline.execution.url>","description":"Is success <+step.identifier>","context":"harness-ci/tests"}'
        strategy:
          matrix:
            type2: <+pipeline.stages.DetermineMatrix.spec.execution.steps.Run_1.output.outputVariables.types>.split(',')
  variables: []
